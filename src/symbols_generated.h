{0x00102380, "gdt_encodeGdtEntry"},
{0x00102416, "gdt_gdt_c"},
{0x00102560, "cpuid_init"},
{0x001027ce, "cpuid_get_feat"},
{0x00102802, "cpuid_supports_rdseed"},
{0x00102828, "num_to_str"},
{0x00102945, "unsigned_num_to_str"},
{0x00102a48, "add_event"},
{0x00102aaf, "remove_event"},
{0x00102ada, "trigger_event"},
{0x00102b2d, "pcspk_play_sound"},
{0x00102bb7, "pcspk_nosound"},
{0x00102be0, "beep"},
{0x00102c0b, "beep_at"},
{0x00102c34, "beep_for"},
{0x00102c60, "beep_at_for"},
{0x00102c8a, "console_move_cursor"},
{0x00102cc8, "console_scroll_up"},
{0x00102e29, "console_handle_carriage_return"},
{0x00102e45, "console_handle_line_feed"},
{0x00102e93, "console_handle_newline"},
{0x00102ea6, "console_set_color"},
{0x00102ebe, "console_update_cursor"},
{0x00102f3d, "console_advance_cursor"},
{0x00102fb2, "putchar"},
{0x00103066, "print"},
{0x0010309f, "console_init"},
{0x001030b4, "console_clear_screen"},
{0x00103108, "put_char_at"},
{0x00103163, "put_color_at"},
{0x001031c0, "get_char_at"},
{0x00103211, "get_color_at"},
{0x00103264, "klog_prefix"},
{0x0010343c, "klog"},
{0x001034ed, "klogf"},
{0x001035d4, "outb"},
{0x001035f3, "inb"},
{0x00103610, "outw"},
{0x00103631, "inw"},
{0x00103650, "io_wait"},
{0x00103665, "_panic_print_hex"},
{0x0010372b, "lookup_symbol"},
{0x00103797, "panic_panic"},
{0x00103a9d, "k_heapBMInit"},
{0x00103aac, "k_heapBMAddBlock"},
{0x00103bc3, "k_heapBMAlloc"},
{0x00103dbc, "k_heapBMFree"},
{0x00103e9d, "heap_malloc"},
{0x00103eb2, "heap_calloc"},
{0x00103ede, "heap_free"},
{0x00103ef4, "heap_init"},
{0x00103f77, "_kmalloc"},
{0x00103fae, "PIC_sendEOI"},
{0x00103fe4, "PIC_remap"},
{0x001040ed, "pic_init"},
{0x0010412f, "IRQ_set_mask"},
{0x00104195, "IRQ_clear_mask"},
{0x001041fd, "strcpy"},
{0x00104233, "strncpy"},
{0x00104273, "strcat"},
{0x001042b9, "strdup"},
{0x00104307, "strndup"},
{0x00104366, "strlen"},
{0x0010438c, "strcmp"},
{0x0010440e, "strncmp"},
{0x001044a7, "strchr"},
{0x001044d4, "strrchr"},
{0x0010450a, "strspn"},
{0x0010454e, "strcspn"},
{0x00104592, "strpbrk"},
{0x001045ca, "strstr"},
{0x00104607, "strtok"},
{0x00104692, "memchr"},
{0x001046c8, "memcmp"},
{0x00104723, "memset"},
{0x0010474e, "memcpy"},
{0x00104784, "memmove"},
{0x001047ef, "memccpy"},
{0x00104844, "time_interrupt"},
{0x00104878, "time_init"},
{0x00104915, "sleep"},
{0x0010493f, "rand_lcg"},
{0x00104985, "rand_init"},
{0x00104a12, "rand_in_range"},
{0x00104a54, "serial_init"},
{0x00104ba6, "serial_print_char"},
{0x00104c04, "serial_flush"},
{0x00104c29, "serial_print"},
{0x00104c6d, "_serial_out_char"},
{0x00104c8c, "vga_get_color"},
{0x00104cfe, "vga_set_color"},
{0x00104d6d, "vga_get_palette"},
{0x00104db2, "vga_set_palette"},
{0x0010652b, "printf_"},
{0x0010655c, "sprintf_"},
{0x0010658c, "snprintf_"},
{0x001065bd, "vprintf_"},
{0x001065e1, "vsnprintf_"},
{0x00106605, "fctprintf"},
{0x00106642, "_putchar"},
{0x00106661, "sys_info_gather"},
{0x001068c3, "_ps2_print_device"},
{0x00106910, "ps2_detect_devices"},
{0x00106a17, "ps2_device_send_command"},
{0x00106a6a, "ps2_device_send_command_with_argument"},
{0x00106aaf, "ps2_device_send_command_with_output"},
{0x00106aed, "ps2_device_send_command_with_output_and_argument"},
{0x00106b36, "ps2_device_read"},
{0x00106b5b, "controller_read_status"},
{0x00106ba4, "controller_send_command"},
{0x00106bca, "controller_send_command_with_argument"},
{0x00106c0d, "controller_send_command_with_output"},
{0x00106c44, "controller_send_command_with_output_and_argument"},
{0x00106c98, "controller_read_configuration_byte"},
{0x00106cad, "controller_write_configuration_byte"},
{0x00106cce, "ps2_controller_init"},
{0x001070fd, "ps2_restart_system"},
{0x00107186, "flip_case"},
{0x00107222, "has_key"},
{0x00107460, "getch"},
{0x001074ae, "ps2_keyboard_flush"},
{0x001074c0, "ps2_keyboard_init"},
{0x001075b7, "interrupt_stub"},
{0x001075bd, "interrupt_handler"},
{0x001075d9, "idt_set_descriptor"},
{0x00107631, "attach_interrupt"},
{0x0010764e, "idt_init"},
{0x00107721, "exception"},
{0x001077fd, "exception_handlers_init"},
{0x0010786b, "call_global_constructors"},
{0x001078ad, "kernel_main"},
{0x001079a0, "start"},
{0x001079e0, "_cpuid_check"},
{0x00107a10, "panic_save_regs"},
{0x00107a40, "init_PIT"},
{0x00107f40, "interrupt_stub_table"},
{0x00108051, "app_menu(tui::Menu*)"},
{0x001081af, "user_main"},
{0x00108296, "__cxa_pure_virtual"},
{0x001082b8, "__cxa_guard_acquire"},
{0x001082cb, "__cxa_guard_release"},
{0x001082d7, "__cxa_guard_abort"},
{0x001082dd, "operator new(unsigned long)"},
{0x001082f3, "operator new[](unsigned long)"},
{0x00108309, "operator delete(void*)"},
{0x00108320, "operator delete[](void*)"},
{0x00108337, "operator delete(void*, unsigned long)"},
{0x0010834e, "operator delete[](void*, unsigned long)"},
{0x00108365, "__cxa_finalize"},
{0x0010836b, "__cxa_atexit"},
{0x00108375, "__cxa_throw"},
{0x00108397, "__cxa_begin_catch"},
{0x001083b9, "__cxa_end_catch"},
{0x001083db, "std::rand()"},
{0x001083ea, "std::string::string()"},
{0x001083ea, "std::string::string()"},
{0x0010840e, "std::string::string(char const*)"},
{0x0010840e, "std::string::string(char const*)"},
{0x00108466, "std::string::string(std::string const&)"},
{0x00108466, "std::string::string(std::string const&)"},
{0x001084b6, "std::string::~string()"},
{0x001084b6, "std::string::~string()"},
{0x001084da, "std::string::operator=(std::string const&)"},
{0x0010854e, "std::string::c_str() const"},
{0x00108568, "std::string::length() const"},
{0x00108574, "std::string::empty() const"},
{0x00108584, "std::string::operator+(std::string const&) const"},
{0x00108626, "std::string::operator+=(std::string const&)"},
{0x00108668, "std::string::operator char*()"},
{0x00108682, "std::string::operator char const*() const"},
{0x0010869c, "std::get_time_ms()"},
{0x001086a6, "std::sleep(unsigned int)"},
{0x00108778, "tui::open_menu(tui::MenuContext*, tui::Menu*, tui::GenericPoint<int>, tui::GenericSize<int>, unsigned int)"},
{0x0010881d, "tui::draw_menu(tui::MenuContext*)"},
{0x001089cd, "tui::get_menu(tui::MenuContext*)"},
{0x001089e8, "tui::close_menu(tui::MenuContext*)"},
{0x00108a2a, "tui::menu_block(tui::Menu*, tui::GenericPoint<int>, tui::GenericSize<int>, unsigned int)"},
{0x00108aaa, "tui::box_chars(tui::GenericPoint<int>, tui::GenericSize<int>)"},
{0x00108bac, "tui::box(tui::GenericPoint<int>, tui::GenericSize<int>, unsigned char, unsigned char, char)"},
{0x00108c0a, "tui::dbox_chars(tui::GenericPoint<int>, tui::GenericSize<int>)"},
{0x00108d0c, "tui::dbox(tui::GenericPoint<int>, tui::GenericSize<int>, unsigned char, unsigned char, char)"},
{0x00108d6a, "tui::copy(unsigned char*, tui::GenericPoint<int>, tui::GenericSize<int>)"},
{0x00108e22, "tui::paste(unsigned char*, tui::GenericPoint<int>, tui::GenericSize<int>)"},
{0x00108ee5, "tui::fill_character(tui::GenericPoint<int>, tui::GenericSize<int>, char)"},
{0x00108f47, "tui::fill_color(tui::GenericPoint<int>, tui::GenericSize<int>, char)"},
{0x00108fa9, "tui::fill(tui::GenericPoint<int>, tui::GenericSize<int>, char, char)"},
{0x00109040, "__udivdi3"},
{0x00109160, "__umoddi3"},
{0, ""}
